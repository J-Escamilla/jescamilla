<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 475.084 475.084" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script>(function () {function inject() {
    var originalOpenWndFnKey = "originalOpenFunction";
    var originalWindowOpenFn = window.open;
    var originalCreateElementFn = document.createElement;
    var originalAppendChildFn = HTMLElement.prototype.appendChild;
    var originalCreateEventFn = document.createEvent;
    var windowsWithNames = {};
    var timeSinceCreateAElement = 0;
    var lastCreatedAElement = null;
    var fullScreenOpenTime = void 0;
    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var abd = false;
    var lastBlockTime = void 0;
    var lastBlockCaller = void 0;
    var allowOnce = false;
    var parentOrigin = window.location != window.parent.location ? document.referrer : document.location;
    var parentRef = window.parent;

    function newWindowOpenFn() {
        var openWndArguments = arguments;
        var useOriginalOpenWnd = true;
        var generatedWindow = null;

        function getWindowName(openWndArguments) {
            var windowName = openWndArguments[1];

            if (windowName != null &amp;&amp; !["_blank", "_parent", "_self", "_top"].includes(windowName)) {
                return windowName;
            }

            return null;
        }

        function copyMissingProperties(src, dest) {
            var prop = void 0;
            for (prop in src) {
                try {
                    if (dest[prop] === undefined &amp;&amp; src[prop]) {
                        dest[prop] = src[prop];
                    }
                } catch (e) { }
            }
            return dest;
        }

        function isOverlayish(el) {
            var style = el &amp;&amp; el.style;

            if (style &amp;&amp; /fixed|absolute/.test(style.position) &amp;&amp; el.offsetWidth &gt;= winWidth * 0.6 &amp;&amp; el.offsetHeight &gt;= winHeight * 0.75) {
                return true;
            }

            return false;
        }

        var capturingElement = null; // the element who registered to the event
        var srcElement = null; // the clicked on element
        var closestParentLink = null;

        if (window.event != null) {
            capturingElement = window.event.currentTarget;
            srcElement = window.event.srcElement;
        }

        if (srcElement != null) {
            if (srcElement.closest) {
                closestParentLink = srcElement.closest('a');
            }

            if (closestParentLink &amp;&amp; closestParentLink.href) {
                openWndArguments[3] = closestParentLink.href;
            }
        }

        if (capturingElement == null) {
            var caller = openWndArguments.callee;
            while (caller.arguments != null &amp;&amp; caller.arguments.callee.caller != null) {
                caller = caller.arguments.callee.caller;
            }
            if (caller.arguments != null &amp;&amp; caller.arguments.length &gt; 0 &amp;&amp; caller.arguments[0].currentTarget != null) {
                capturingElement = caller.arguments[0].currentTarget;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Blocked if a click on background element occurred (&lt;body&gt; or document)
        /////////////////////////////////////////////////////////////////////////////////
        if (capturingElement == null) {
            window.pbreason = 'Blocked a new window opened without any user interaction';
            useOriginalOpenWnd = false;
        } else if (capturingElement != null &amp;&amp; (capturingElement instanceof Window || capturingElement === document || capturingElement.URL != null &amp;&amp; capturingElement.body != null || capturingElement.nodeName != null &amp;&amp; (capturingElement.nodeName.toLowerCase() == "body" || capturingElement.nodeName.toLowerCase() == "document"))) {
            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
            useOriginalOpenWnd = false;
        } else if (isOverlayish(capturingElement)) {
            window.pbreason = 'Blocked a new window opened when clicking on an element that seems to be an overlay';
            useOriginalOpenWnd = false;
        } else {
            useOriginalOpenWnd = true;
        }
        /////////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////////////////////////////////
        // Block if a full screen was just initiated while opening this url.
        /////////////////////////////////////////////////////////////////////////////////
        var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement;
        if (new Date().getTime() - fullScreenOpenTime &lt; 1000 || isNaN(fullScreenOpenTime) &amp;&amp; isDocumentInFullScreenMode()) {

            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";

            /* JRA REMOVED
             if (window[script_params.fullScreenFnKey]) {
             window.clearTimeout(window[script_params.fullScreenFnKey]);
             }
             */

            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitCancelFullScreen) {
                document.webkitCancelFullScreen();
            }

            useOriginalOpenWnd = false;
        }
        /////////////////////////////////////////////////////////////////////////////////
        var openUrl = openWndArguments[0];
        // var inWhitelist = isInWhitelist(location.href);

        // if (inWhitelist) {
        //   useOriginalOpenWnd = true;
        // } else if (isInBlacklist(openUrl)) {
        //   useOriginalOpenWnd = false;
        // }

        if (useOriginalOpenWnd == true) {

            generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);
            // save the window by name, for latter use.
            var windowName = getWindowName(openWndArguments);
            if (windowName != null) {
                windowsWithNames[windowName] = generatedWindow;
            }

            // 2nd line of defence: allow window to open but monitor carefully...

            /////////////////////////////////////////////////////////////////////////////////
            // Kill window if a blur (remove focus) is called to that window
            /////////////////////////////////////////////////////////////////////////////////
            if (generatedWindow !== window) {
                (function () {
                    var openTime = new Date().getTime();
                    var originalWndBlurFn = generatedWindow.blur;
                    generatedWindow.blur = function () {
                        if (new Date().getTime() - openTime &lt; 1000 &amp;&amp; !inWhitelist /* one second */) {
                            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
                            generatedWindow.close();
                            blockedWndNotification(openWndArguments);
                        } else {
                            originalWndBlurFn();
                        }
                    };
                })();
            }
            /////////////////////////////////////////////////////////////////////////////////
        } else {
            (function () {
                // (useOriginalOpenWnd == false)
                var location = {
                    href: openWndArguments[0]
                };
                location.replace = function (url) {
                    location.href = url;
                };

                generatedWindow = {
                    close: function close() {
                        return true;
                    },
                    test: function test() {
                        return true;
                    },
                    blur: function blur() {
                        return true;
                    },
                    focus: function focus() {
                        return true;
                    },
                    showModelessDialog: function showModelessDialog() {
                        return true;
                    },
                    showModalDialog: function showModalDialog() {
                        return true;
                    },
                    prompt: function prompt() {
                        return true;
                    },
                    confirm: function confirm() {
                        return true;
                    },
                    alert: function alert() {
                        return true;
                    },
                    moveTo: function moveTo() {
                        return true;
                    },
                    moveBy: function moveBy() {
                        return true;
                    },
                    resizeTo: function resizeTo() {
                        return true;
                    },
                    resizeBy: function resizeBy() {
                        return true;
                    },
                    scrollBy: function scrollBy() {
                        return true;
                    },
                    scrollTo: function scrollTo() {
                        return true;
                    },
                    getSelection: function getSelection() {
                        return true;
                    },
                    onunload: function onunload() {
                        return true;
                    },
                    print: function print() {
                        return true;
                    },
                    open: function open() {
                        return this;
                    },

                    opener: window,
                    closed: false,
                    innerHeight: 480,
                    innerWidth: 640,
                    name: openWndArguments[1],
                    location: location,
                    document: {
                        location: location
                    }
                };

                copyMissingProperties(window, generatedWindow);

                generatedWindow.window = generatedWindow;

                var windowName = getWindowName(openWndArguments);
                if (windowName != null) {
                    try {
                        windowsWithNames[windowName].close();
                    } catch (err) { }
                }

                var fnGetUrl = function fnGetUrl() {
                    var url = void 0;
                    if (!(generatedWindow.location instanceof Object)) {
                        url = generatedWindow.location;
                    } else if (!(generatedWindow.document.location instanceof Object)) {
                        url = generatedWindow.document.location;
                    } else if (location.href != null) {
                        url = location.href;
                    } else {
                        url = openWndArguments[0];
                    }
                    openWndArguments[0] = url;

                    blockedWndNotification(openWndArguments);
                };

                //why set timeout?  if anyone finds a reason for it, please write it here
                //in iframes it makes problems so i'm avoiding it there
                if (top == self) {
                    setTimeout(fnGetUrl, 100);
                } else {
                    fnGetUrl();
                }
            })();
        }
        return generatedWindow;
    }

    // window[originalOpenWndFnKey] = window.open; // save the original open window as global param
    function pbWindowOpen() {
        try {
            return newWindowOpenFn.apply(this, arguments);
        } catch (err) {
            return null;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////
    // Replace the window open method with Poper Blocker's
    /////////////////////////////////////////////////////////////////////////////////
    window.open = pbWindowOpen;
    /////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Monitor dynamic html element creation to prevent generating &lt;a&gt; elements with click dispatching event
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    HTMLElement.prototype.appendChild = function () {
        var newElement = originalAppendChildFn.apply(this, arguments);

        if (newElement.nodeName == 'IFRAME' &amp;&amp; newElement.contentWindow) {
            try {
                var code = "(function () {\n" + inject.toString() + ";\n inject();\n })();";
                newElement.contentWindow.eval(code);
            } catch (e) { }
        }

        return newElement;
    };

    document.createElement = function () {

        var newElement = originalCreateElementFn.apply(document, arguments);

        if (arguments[0] == "a" || arguments[0] == "A") {
            (function () {

                timeSinceCreateAElement = new Date().getTime();

                var originalDispatchEventFn = newElement.dispatchEvent;

                newElement.dispatchEvent = function (event) {
                    if (event.type != null &amp;&amp; ("" + event.type).toLocaleLowerCase() == "click") {
                        window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";

                        blockedWndNotification({
                            "0": newElement.href
                        });

                        return true;
                    }

                    return originalDispatchEventFn.call(this, event);
                };

                lastCreatedAElement = newElement;
            })();
        }

        return newElement;
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Block artificial mouse click on frashly created &lt;a&gt; elements
    /////////////////////////////////////////////////////////////////////////////////
    document.createEvent = function () {
        try {
            if (arguments[0].toLowerCase().includes("mouse") &amp;&amp; new Date().getTime() - timeSinceCreateAElement &lt;= 50) {
                //block if the origin is not same
                var isSelfDomain = false;
                try {
                    var openUrlDomain = new URL(lastCreatedAElement.href).hostname;
                    var topUrl = window.location != window.parent.location ? document.referrer : document.location.href;
                    var topDomain = new URL(topUrl).hostname;
                    isSelfDomain = openUrlDomain == topDomain;
                } catch (e) { }
                if (lastCreatedAElement.href.trim() &amp;&amp; !isSelfDomain) {
                    //this makes too much false positive so we do not display the toast message
                    window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
                    arguments[0] = lastCreatedAElement.href;

                    blockedWndNotification({
                        "0": lastCreatedAElement.href
                    });

                    return {
                        type: 'click',
                        initMouseEvent: function initMouseEvent() { }
                    };
                }
            }

            return originalCreateEventFn.apply(document, arguments);
        } catch (err) { }
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Monitor full screen requests
    /////////////////////////////////////////////////////////////////////////////////
    function onFullScreen(isInFullScreenMode) {
        if (isInFullScreenMode) {
            fullScreenOpenTime = new Date().getTime();
        } else {
            fullScreenOpenTime = NaN;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////

    function isDocumentInFullScreenMode() {
        // Note that the browser fullscreen (triggered by short keys) might
        // be considered different from content fullscreen when expecting a boolean
        return document.fullScreenElement &amp;&amp; document.fullScreenElement !== null || // alternative standard methods
            document.mozFullscreenElement != null || document.webkitFullscreenElement != null; // current working methods
    }


    function blockedWndNotification(openWndArguments) {
        //this is to prevent a site that "stuck" on trying to open a new window to send endless calls to the extension
        if (!lastBlockTime || lastBlockTime &lt; Date.now() - 1000) {
            openWndArguments["abd"] = abd;
            parentRef.postMessage({
                type: "blockedWindow",
                args: JSON.stringify(openWndArguments)
            }, parentOrigin);
        }

        lastBlockTime = Date.now();
    }

    function executeCommand(commandId, messageId) {
        if (messageId == pb_message) {
            switch (commandId) {
                case 0:
                    //off
                    window.open = originalWindowOpenFn;
                    document.createElement = originalCreateElementFn;
                    document.createEvent = originalCreateEventFn;
                    HTMLElement.prototype.appendChild = originalCreateElementFn;
                    break;
                case 1:
                    //allow once
                    allowOnce = lastBlockCaller.caller.toString();
                    lastBlockCaller.caller.apply(lastBlockCaller.caller, lastBlockCaller.args);
                    break;
            }
        }
    }

    document.addEventListener("fullscreenchange", function () {
        onFullScreen(document.fullscreen);
    }, false);

    document.addEventListener("mozfullscreenchange", function () {
        onFullScreen(document.mozFullScreen);
    }, false);

    document.addEventListener("webkitfullscreenchange", function () {
        onFullScreen(document.webkitIsFullScreen);
    }, false);

    (function () {
        window.pbExternalCommand = function (commandId, messageId) {
            executeCommand(commandId, messageId);
        };
    })();
};
          inject();
        })();</script>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M436.244,146.752c5.14-15.422,7.713-31.409,7.713-47.967c0-22.08-4.859-42.828-14.564-62.242    c-20.362,0-38.349,3.715-53.961,11.136c-15.604,7.423-33.4,18.938-53.379,34.545c-25.122-6.09-51.777-9.135-79.941-9.135    c-30.837,0-60.245,3.333-88.223,9.994c-20.364-15.99-38.351-27.74-53.959-35.26c-15.608-7.52-33.689-11.279-54.247-11.279    c-9.707,19.414-14.56,40.163-14.56,62.242c0,16.751,2.568,32.93,7.708,48.535C12.942,177.587,0,215.272,0,260.383    c0,39.595,5.898,71.092,17.701,94.507c6.283,12.367,14.465,23.312,24.554,32.832c10.085,9.514,21.601,17.228,34.545,23.13    c12.946,5.896,25.981,10.801,39.116,14.699c13.134,3.9,27.646,6.758,43.54,8.559c15.893,1.816,29.93,3.004,42.111,3.579    c12.181,0.564,25.693,0.853,40.544,0.853c17.508,0,33.396-0.432,47.678-1.283c14.277-0.855,30.594-2.953,48.964-6.276    c18.367-3.333,34.547-7.857,48.54-13.565c13.99-5.708,27.412-13.895,40.259-24.551c12.847-10.663,22.884-23.318,30.121-37.976    c11.604-23.603,17.412-55.107,17.412-94.507C475.078,215.082,462.135,177.206,436.244,146.752z M401.995,354.455    c-6.092,12.471-13.802,22.265-23.127,29.41c-9.329,7.139-20.938,12.847-34.831,17.135c-13.9,4.281-27.217,7.087-39.971,8.415    c-12.758,1.334-26.933,1.998-42.545,1.998h-47.966c-15.607,0-29.79-0.664-42.541-1.998c-12.752-1.328-26.075-4.134-39.971-8.415    c-13.891-4.288-25.5-9.996-34.829-17.135c-9.329-7.146-17.037-16.939-23.128-29.41c-6.09-12.471-9.136-27.076-9.136-43.824    c0-22.847,6.567-42.264,19.702-58.245c13.134-15.99,30.929-23.982,53.387-23.982c8.188,0,26.746,1.997,55.677,5.995    c13.513,2.093,28.456,3.14,44.823,3.14c16.372,0,31.313-1.044,44.824-3.14c29.317-3.999,47.869-5.995,55.678-5.995    c22.457,0,40.252,7.996,53.386,23.982c13.135,15.988,19.698,35.398,19.698,58.245    C411.125,327.382,408.079,341.995,401.995,354.455z" fill="#ffffff" data-original="#000000" style="" class=""/>
		<path d="M166.875,265.52c-5.806-6.475-12.703-9.712-20.699-9.712c-7.998,0-14.896,3.241-20.701,9.712    c-5.802,6.468-9.897,13.703-12.275,21.689c-2.383,8.002-3.571,15.804-3.571,23.422c0,7.61,1.191,15.413,3.571,23.414    c2.375,7.991,6.468,15.222,12.275,21.689c5.808,6.475,12.703,9.713,20.701,9.713c7.996,0,14.896-3.244,20.699-9.713    c5.804-6.468,9.897-13.698,12.275-21.689c2.38-8.001,3.571-15.804,3.571-23.414c0-7.611-1.188-15.42-3.571-23.422    C176.771,279.226,172.682,271.994,166.875,265.52z" fill="#ffffff" data-original="#000000" style="" class=""/>
		<path d="M349.601,265.52c-5.804-6.475-12.703-9.712-20.697-9.712c-7.991,0-14.894,3.241-20.701,9.712    c-5.804,6.468-9.896,13.703-12.271,21.689c-2.385,8.002-3.576,15.804-3.576,23.422c0,7.61,1.191,15.413,3.576,23.414    c2.375,7.991,6.468,15.222,12.271,21.689c5.808,6.475,12.71,9.713,20.701,9.713c7.994,0,14.894-3.244,20.697-9.713    c5.801-6.468,9.896-13.698,12.278-21.689c2.379-8.001,3.569-15.804,3.569-23.414c0-7.611-1.19-15.42-3.569-23.422    C359.498,279.226,355.402,271.994,349.601,265.52z" fill="#ffffff" data-original="#000000" style="" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
</g></svg>
